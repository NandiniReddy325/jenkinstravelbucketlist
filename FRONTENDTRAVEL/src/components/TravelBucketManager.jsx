// import React, { useState } from 'react';
// import axios from 'axios';
// import "./style.css";
// import config from './config.js';

// const TravelBucketManager = () => {
//   const [place, setPlace] = useState({
//     id: '',
//     destination: '',
//     country: '',
//     notes: '',
//     visited: 'NO'
//   });
//   const [message, setMessage] = useState('');

//   // ✅ Backend base URL
//   const baseUrl = `${config.url}/travelapi`;



//   const handleChange = (e) => {
//     setPlace({ ...place, [e.target.name]: e.target.value });
//   };

//   // ✅ Validation
//   const validateForm = () => {
//     if (!place.destination || !place.country) {
//       setMessage('⚠️ Please fill required fields: Destination & Country');
//       return false;
//     }
//     return true;
//   };

//   // ✅ Add new destination (id auto-generated by DB)
//   const addPlace = async () => {
//     if (!validateForm()) return;
//     try {
//       const payload = {
//         destination: place.destination,
//         country: place.country,
//         notes: place.notes,
//         visited: place.visited
//       };
//       await axios.post(`${baseUrl}/add`, payload);

//    // ✅ Correct final URL
//       setMessage('✅ Destination added successfully!');
//       resetForm();
//     } catch (error) {
//       console.error("Add error:", error);
//       setMessage('❌ Error adding destination');
//     }
//   };

//   // ✅ Update existing destination
//   const updatePlace = async () => {
//     if (!place.id) {
//       setMessage('⚠️ ID is required to update');
//       return;
//     }
//     if (!validateForm()) return;
//     try {
//       await axios.put(`${baseUrl}/update`, place);
//       setMessage('✅ Destination updated successfully!');
//       resetForm();
//     } catch (error) {
//       console.error("Update error:", error);
//       setMessage('❌ Error updating destination');
//     }
//   };

//   // ✅ Delete by ID
//   const deletePlace = async () => {
//     if (!place.id) {
//       setMessage('⚠️ Enter an ID to delete');
//       return;
//     }
//     try {
//       const res = await axios.delete(`${baseUrl}/delete/${place.id}`);
//       setMessage(res.data || '✅ Destination deleted successfully!');
//       resetForm();
//     } catch (error) {
//       console.error("Delete error:", error);
//       setMessage('❌ Error deleting destination');
//     }
//   };

//   // ✅ Reset form
//   const resetForm = () => {
//     setPlace({
//       id: '',
//       destination: '',
//       country: '',
//       notes: '',
//       visited: 'NO'
//     });
//   };

//   return (
//     <div className="travel-container">
//       {message && (
//         <div
//           className={`message-banner ${
//             message.includes('❌') || message.includes('⚠️') ? 'error' : 'success'
//           }`}
//         >
//           {message}
//         </div>
//       )}

//       <h2>🌍 Travel Bucket List Manager-Practice</h2>

//       <div className="form-grid">
//         <input
//           type="text"
//           name="destination"
//           placeholder="Destination"
//           value={place.destination}
//           onChange={handleChange}
//         />
//         <input
//           type="text"
//           name="country"
//           placeholder="Country"
//           value={place.country}
//           onChange={handleChange}
//         />
//         <input
//           type="text"
//           name="notes"
//           placeholder="Notes"
//           value={place.notes}
//           onChange={handleChange}
//         />
//         <select name="visited" value={place.visited} onChange={handleChange}>
//           <option value="NO">Not Visited</option>
//           <option value="YES">Visited</option>
//         </select>
//       </div>

//       <div className="btn-group">
//         <button className="btn-blue" onClick={addPlace}>➕ Add Destination</button>
//         <input
//           type="number"
//           name="id"
//           placeholder="Enter ID for update/delete"
//           value={place.id}
//           onChange={handleChange}
//         />
//         <button className="btn-green" onClick={updatePlace}>✏️ Update Destination</button>
//         <button className="btn-red" onClick={deletePlace}>🗑️ Delete Destination</button>
//         <button className="btn-gray" onClick={resetForm}>🔄 Reset</button>
//       </div>
//     </div>
//   );
// };

// export default TravelBucketManager;






import React, { useState } from 'react';
import axios from 'axios';
import "./style.css";
import config from './config.js';

const TravelBucketManager = () => {
  const [place, setPlace] = useState({
    id: '',
    destination: '',
    country: '',
    notes: '',
    visited: 'NO'
  });
  const [message, setMessage] = useState('');

  // ✅ Use config.url directly (no duplicate /travelapi)
  const baseUrl = config.url;

  const handleChange = (e) => {
    setPlace({ ...place, [e.target.name]: e.target.value });
  };

  // ✅ Validation
  const validateForm = () => {
    if (!place.destination || !place.country) {
      setMessage('⚠️ Please fill required fields: Destination & Country');
      return false;
    }
    return true;
  };

  // ✅ Add new destination (id auto-generated by DB)
  const addPlace = async () => {
    if (!validateForm()) return;
    try {
      const payload = {
        destination: place.destination,
        country: place.country,
        notes: place.notes,
        visited: place.visited
      };
      await axios.post(`${baseUrl}/add`, payload);

      setMessage('✅ Destination added successfully!');
      resetForm();
    } catch (error) {
      console.error("Add error:", error);
      setMessage('❌ Error adding destination');
    }
  };

  // ✅ Update existing destination
  const updatePlace = async () => {
    if (!place.id) {
      setMessage('⚠️ ID is required to update');
      return;
    }
    if (!validateForm()) return;
    try {
      await axios.put(`${baseUrl}/update`, place);
      setMessage('✅ Destination updated successfully!');
      resetForm();
    } catch (error) {
      console.error("Update error:", error);
      setMessage('❌ Error updating destination');
    }
  };

  // ✅ Delete by ID
  const deletePlace = async () => {
    if (!place.id) {
      setMessage('⚠️ Enter an ID to delete');
      return;
    }
    try {
      const res = await axios.delete(`${baseUrl}/delete/${place.id}`);
      setMessage(res.data || '✅ Destination deleted successfully!');
      resetForm();
    } catch (error) {
      console.error("Delete error:", error);
      setMessage('❌ Error deleting destination');
    }
  };

  // ✅ Reset form
  const resetForm = () => {
    setPlace({
      id: '',
      destination: '',
      country: '',
      notes: '',
      visited: 'NO'
    });
  };

  return (
    <div className="travel-container">
      {message && (
        <div
          className={`message-banner ${
            message.includes('❌') || message.includes('⚠️') ? 'error' : 'success'
          }`}
        >
          {message}
        </div>
      )}

      <h2>🌍 Travel Bucket List Manager-Practice</h2>

      <div className="form-grid">
        <input
          type="text"
          name="destination"
          placeholder="Destination"
          value={place.destination}
          onChange={handleChange}
        />
        <input
          type="text"
          name="country"
          placeholder="Country"
          value={place.country}
          onChange={handleChange}
        />
        <input
          type="text"
          name="notes"
          placeholder="Notes"
          value={place.notes}
          onChange={handleChange}
        />
        <select name="visited" value={place.visited} onChange={handleChange}>
          <option value="NO">Not Visited</option>
          <option value="YES">Visited</option>
        </select>
      </div>

      <div className="btn-group">
        <button className="btn-blue" onClick={addPlace}>➕ Add Destination</button>
        <input
          type="number"
          name="id"
          placeholder="Enter ID for update/delete"
          value={place.id}
          onChange={handleChange}
        />
        <button className="btn-green" onClick={updatePlace}>✏️ Update Destination</button>
        <button className="btn-red" onClick={deletePlace}>🗑️ Delete Destination</button>
        <button className="btn-gray" onClick={resetForm}>🔄 Reset</button>
      </div>
    </div>
  );
};

export default TravelBucketManager;
